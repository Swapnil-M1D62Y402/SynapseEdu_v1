// schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Supabase Postgres
  directUrl = env("DIRECT_URL") // For migrations
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          String      @id @default(cuid())
  email       String      @unique
  name        String?
  password    String
  createdAt   DateTime    @default(now())

  studyKits   StudyKit[]
}

model StudyKit {
  id                  String      @id @default(uuid())
  name                String
  lastAccessed        DateTime    @default(now())   // initial creation time
  masteryPercentage   Float       @default(0.0)     // 0 until user starts
  streak              Int         @default(0)       // no streak yet
  kpiScore            Float       @default(0.0)     // neutral baseline
  attentionSpan       Float       @default(0.0)     // avg minutes/session
  studyGuideSummary   String      @db.Text          // long text for summaries

  userId              String
  user                User        @relation(fields: [userId], references: [id])
  
  // Relations
  todos               ToDo[]
  sources             Source[]
  mcqs                Smart_Study_MCQ[]
  flashcards          FlashCard[]
  tests               Test[]

  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
}


model ToDo {
  id         String    @id @default(uuid())
  title      String
  completed  Boolean   @default(false)
  studyKit   StudyKit  @relation(fields: [studyKitId], references: [id])
  studyKitId String
}

model Source {
  id           String   @id @default(cuid())
  studyKitId   String
  studyKit     StudyKit @relation(fields: [studyKitId], references: [id])

  fileUrl      String   // Supabase public URL
  fileName     String   // Original filename
  fileType     String   // pdf, docx, txt, csv
  fileSize     Int?     // size in bytes
  storagePath  String   // Supabase Storage path (bucket/key)

  processed    Boolean  @default(false) // whether embedded
  loaderUsed   String?  // which LangChain loader was used

  addedAt      DateTime @default(now())
}

model FlashCard {
  id            String     @id @default(cuid()) // flashcard_item_id
  studyKitId    String
  studyKit      StudyKit   @relation(fields: [studyKitId], references: [id])

  front         String
  back          String

  createdAt     DateTime   @default(now())
}


model Smart_Study_MCQ {
  id         String    @id @default(cuid())
  studyKitId String
  studyKit   StudyKit  @relation(fields: [studyKitId], references: [id])

  questionId    Int        // your custom sequential id (q_1, q_2, etc.)
  question      String
  choices       Json       // [{ key: "A", text: "..." }, {...}]
  correctOption String     // options keys "A" or "B" or "C"
  explanation   Json       // ["line1", "line2", ...]
  difficulty    Difficulty // enum (easy, medium, hard)

  createdAt     DateTime   @default(now())
}

model Test {
  id        String        @id @default(cuid())
  studyKitId String
  studyKit   StudyKit  @relation(fields: [studyKitId], references: [id])

  questionId    String     // e.g., "e1"
  difficulty    Difficulty
  question      String
  choices       Json       // [{ key: "1", text: "..." }, {...}]
  correctOption String
  explanation   Json       // ["line1", "line2", ...]
  createdAt DateTime      @default(now())

  history   Test_History[]
}

model Test_History {
  id          String   @id @default(cuid())
  testId      String
  test        Test     @relation(fields: [testId], references: [id])

  testNo      Int     // Unique test number
  difficulty  String
  duration    Int      // in minutes/seconds
  score       Int
  userAnswers Json     // stores answers in JSON

  takenAt     DateTime @default(now())
  @@unique([testId, testNo])
}


enum Difficulty {
  easy
  medium
  hard
}