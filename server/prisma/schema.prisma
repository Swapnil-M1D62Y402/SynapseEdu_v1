// schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Supabase Postgres
  directUrl = env("DIRECT_URL") // For migrations
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          String      @id @default(cuid())
  email       String      @unique
  name        String?
  password    String
  createdAt   DateTime    @default(now())

  studyKits   StudyKit[]
}

model StudyKit {
  id         String    @id @default(cuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id])

  title      String
  description String?

  createdAt  DateTime  @default(now())

  sources    Source[]
  flashcards FlashCard[]
  mcqs       Smart_Study_MCQ[]
  tests      Test[]
}

model Source {
  id           String   @id @default(cuid())
  studyKitId   String
  studyKit     StudyKit @relation(fields: [studyKitId], references: [id])

  fileUrl      String   // Supabase public URL
  fileName     String   // Original filename
  fileType     String   // pdf, docx, txt, csv
  fileSize     Int?     // size in bytes
  storagePath  String   // Supabase Storage path (bucket/key)

  processed    Boolean  @default(false) // whether embedded
  loaderUsed   String?  // which LangChain loader was used

  addedAt      DateTime @default(now())
}

model FlashCard {
  id         String    @id @default(cuid())
  studyKitId String
  studyKit   StudyKit  @relation(fields: [studyKitId], references: [id])

  question   String
  answer     String
}

model Smart_Study_MCQ {
  id         String    @id @default(cuid())
  studyKitId String
  studyKit   StudyKit  @relation(fields: [studyKitId], references: [id])

  question   String
  options    String[]  // multiple-choice options
  answer     String    // correct answer
  explanation String?
}

model Test {
  id        String        @id @default(cuid())
  studyKitId String
  studyKit   StudyKit  @relation(fields: [studyKitId], references: [id])

  title     String
  createdAt DateTime      @default(now())
  history   Test_History[]
}

model Test_History {
  id          String   @id @default(cuid())
  testId      String
  test        Test     @relation(fields: [testId], references: [id])

  testNo      Int     // Unique test number
  difficulty  String
  duration    Int      // in minutes/seconds
  score       Int
  userAnswers Json     // stores answers in JSON

  takenAt     DateTime @default(now())
  @@unique([testId, testNo])
}