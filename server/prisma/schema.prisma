generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  name      String?
  password  String
  createdAt DateTime   @default(now())
  studyKits StudyKit[]
}

model StudyKit {
  id                String            @id @default(uuid())
  userId            String
  createdAt         DateTime          @default(now())
  attentionSpan     Float             @default(0.0)
  kpiScore          Float             @default(0.0)
  lastAccessed      DateTime          @default(now())
  masteryPercentage Float             @default(0.0)
  name              String
  streak            Int               @default(0)
  studyGuideSummary String
  updatedAt         DateTime          @updatedAt
  flashcards        FlashCard[]
  mcqs              Smart_Study_MCQ[]
  sources           Source[]
  user              User              @relation(fields: [userId], references: [id])
  tests             Test[]
  todos             ToDo[]
}

model ToDo {
  id         String   @id @default(uuid())
  title      String
  completed  Boolean  @default(false)
  studyKitId String
  studyKit   StudyKit @relation(fields: [studyKitId], references: [id])
}

model Source {
  id          String   @id @default(cuid())
  studyKitId  String
  fileUrl     String
  fileName    String
  fileType    String
  fileSize    Int?
  storagePath String
  processed   Boolean  @default(false)
  loaderUsed  String?
  addedAt     DateTime @default(now())
  studyKit    StudyKit @relation(fields: [studyKitId], references: [id])
}

model FlashCard {
  id         String   @id @default(cuid())
  studyKitId String
  back       String
  createdAt  DateTime @default(now())
  front      String
  studyKit   StudyKit @relation(fields: [studyKitId], references: [id])
}

model Smart_Study_MCQ {
  id            String     @id @default(cuid())
  studyKitId    String
  question      String
  choices       Json
  correctOption String
  createdAt     DateTime   @default(now())
  difficulty    Difficulty
  questionId    Int
  explanation   Json
  studyKit      StudyKit   @relation(fields: [studyKitId], references: [id])
}

model Test {
  id            String         @id @default(cuid())
  studyKitId    String
  createdAt     DateTime       @default(now())
  choices       Json
  correctOption String
  difficulty    Difficulty
  explanation   Json
  question      String
  questionId    String
  studyKit      StudyKit       @relation(fields: [studyKitId], references: [id])
  history       Test_History[]
}

model Test_History {
  id          String   @id @default(cuid())
  testId      String
  testNo      Int
  difficulty  String
  duration    Int
  score       Int
  userAnswers Json
  takenAt     DateTime @default(now())
  test        Test     @relation(fields: [testId], references: [id])

  @@unique([testId, testNo])
}

enum Difficulty {
  easy
  medium
  hard
}
